package opencl

/*
#cgo darwin  LDFLAGS: -framework OpenCL
#cgo linux   LDFLAGS: -lOpenCL
#cgo windows LDFLAGS: -lOpenCL

#ifdef __APPLE__
    #include <OpenCL/opencl.h>
#elif defined(_WIN32)
    #include <CL/opencl.h>
#else
    #include <CL/cl.h>
#endif
*/
import "C"
import (
	"unsafe"
)

type (
	CL_UINT                      C.cl_uint
	CL_PLATFORM_ID               C.cl_platform_id
	CL_INT                       C.cl_int
	CL_PLATFORM_INFO             C.cl_platform_info
	CL_SIZE_T                    C.size_t
	CL_DEVICE_TYPE               C.cl_device_type
	CL_DEVICE_ID                 C.cl_device_id
	CL_DEVICE_INFO               C.cl_device_info
	CL_DEVICE_PARTITION_PROPERTY C.cl_device_partition_property
	CL_CONTEXT                   C.cl_context
	CL_CONTEXT_PROPERTIES        C.cl_context_properties
	CL_CONTEXT_INFO              C.cl_context_info
)

// OpenCL Platform Layer

// Platform Info Constants
const (
	CL_PLATFORM_PROFILE    CL_PLATFORM_INFO = C.CL_PLATFORM_PROFILE
	CL_PLATFORM_VERSION    CL_PLATFORM_INFO = C.CL_PLATFORM_VERSION
	CL_PLATFORM_NAME       CL_PLATFORM_INFO = C.CL_PLATFORM_NAME
	CL_PLATFORM_VENDOR     CL_PLATFORM_INFO = C.CL_PLATFORM_VENDOR
	CL_PLATFORM_EXTENSIONS CL_PLATFORM_INFO = C.CL_PLATFORM_EXTENSIONS
)

// Device Info Constants
const (
	CL_DEVICE_NAME                          CL_DEVICE_INFO = C.CL_DEVICE_NAME
	CL_DEVICE_VENDOR                        CL_DEVICE_INFO = C.CL_DEVICE_VENDOR
	CL_DEVICE_PROFILE                       CL_DEVICE_INFO = C.CL_DEVICE_PROFILE
	CL_DEVICE_TYPE_                         CL_DEVICE_INFO = C.CL_DEVICE_TYPE
	CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR      CL_DEVICE_INFO = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR
	CL_DEVICE_NATIVE_VECTOR_WIDTH_INT       CL_DEVICE_INFO = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_INT
	CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG      CL_DEVICE_INFO = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG
	CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT     CL_DEVICE_INFO = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT
	CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE    CL_DEVICE_INFO = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE
	CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF      CL_DEVICE_INFO = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF
	CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT     CL_DEVICE_INFO = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR   CL_DEVICE_INFO = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT    CL_DEVICE_INFO = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG   CL_DEVICE_INFO = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT  CL_DEVICE_INFO = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE CL_DEVICE_INFO = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF   CL_DEVICE_INFO = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT  CL_DEVICE_INFO = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT
	CL_DEVICE_PREFERRED_INTEROP_USER_SYNC   CL_DEVICE_INFO = C.CL_DEVICE_PREFERRED_INTEROP_USER_SYNC
	CL_DEVICE_ADDRESS_BITS                  CL_DEVICE_INFO = C.CL_DEVICE_ADDRESS_BITS
	CL_DEVICE_AVAILABLE                     CL_DEVICE_INFO = C.CL_DEVICE_AVAILABLE
	CL_DEVICE_BUILT_IN_KERNELS              CL_DEVICE_INFO = C.CL_DEVICE_BUILT_IN_KERNELS
	CL_DEVICE_COMPILER_AVAILABLE            CL_DEVICE_INFO = C.CL_DEVICE_COMPILER_AVAILABLE
	CL_DEVICE_DOUBLE_FP_CONFIG              CL_DEVICE_INFO = C.CL_DEVICE_DOUBLE_FP_CONFIG
	CL_DEVICE_HALF_FP_CONFIG                CL_DEVICE_INFO = C.CL_DEVICE_HALF_FP_CONFIG
	CL_DEVICE_SINGLE_FP_CONFIG              CL_DEVICE_INFO = C.CL_DEVICE_SINGLE_FP_CONFIG
	CL_DEVICE_ENDIAN_LITTLE                 CL_DEVICE_INFO = C.CL_DEVICE_ENDIAN_LITTLE
	CL_DEVICE_EXTENSIONS                    CL_DEVICE_INFO = C.CL_DEVICE_EXTENSIONS
	CL_DEVICE_ERROR_CORRECTION_SUPPORT      CL_DEVICE_INFO = C.CL_DEVICE_ERROR_CORRECTION_SUPPORT
	CL_DEVICE_EXECUTION_CAPABILITIES        CL_DEVICE_INFO = C.CL_DEVICE_EXECUTION_CAPABILITIES
	CL_DEVICE_GLOBAL_MEM_CACHE_SIZE         CL_DEVICE_INFO = C.CL_DEVICE_GLOBAL_MEM_CACHE_SIZE
	CL_DEVICE_GLOBAL_MEM_CACHE_TYPE         CL_DEVICE_INFO = C.CL_DEVICE_GLOBAL_MEM_CACHE_TYPE
	CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE     CL_DEVICE_INFO = C.CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE
	CL_DEVICE_GLOBAL_MEM_SIZE               CL_DEVICE_INFO = C.CL_DEVICE_GLOBAL_MEM_SIZE
	CL_DEVICE_HOST_UNIFIED_MEMORY           CL_DEVICE_INFO = C.CL_DEVICE_HOST_UNIFIED_MEMORY
	CL_DEVICE_IMAGE_MAX_ARRAY_SIZE          CL_DEVICE_INFO = C.CL_DEVICE_IMAGE_MAX_ARRAY_SIZE
	CL_DEVICE_IMAGE_MAX_BUFFER_SIZE         CL_DEVICE_INFO = C.CL_DEVICE_IMAGE_MAX_BUFFER_SIZE
	CL_DEVICE_IMAGE_SUPPORT                 CL_DEVICE_INFO = C.CL_DEVICE_IMAGE_SUPPORT
	CL_DEVICE_IMAGE2D_MAX_WIDTH             CL_DEVICE_INFO = C.CL_DEVICE_IMAGE2D_MAX_WIDTH
	CL_DEVICE_IMAGE2D_MAX_HEIGHT            CL_DEVICE_INFO = C.CL_DEVICE_IMAGE2D_MAX_HEIGHT
	CL_DEVICE_IMAGE3D_MAX_WIDTH             CL_DEVICE_INFO = C.CL_DEVICE_IMAGE3D_MAX_WIDTH
	CL_DEVICE_IMAGE3D_MAX_HEIGHT            CL_DEVICE_INFO = C.CL_DEVICE_IMAGE3D_MAX_HEIGHT
	CL_DEVICE_IMAGE3D_MAX_DEPTH             CL_DEVICE_INFO = C.CL_DEVICE_IMAGE3D_MAX_DEPTH
	CL_DEVICE_LOCAL_MEM_TYPE                CL_DEVICE_INFO = C.CL_DEVICE_LOCAL_MEM_TYPE
	CL_DEVICE_LOCAL_MEM_SIZE                CL_DEVICE_INFO = C.CL_DEVICE_LOCAL_MEM_SIZE
	CL_DEVICE_MAX_READ_IMAGE_ARGS           CL_DEVICE_INFO = C.CL_DEVICE_MAX_READ_IMAGE_ARGS
	CL_DEVICE_MAX_WRITE_IMAGE_ARGS          CL_DEVICE_INFO = C.CL_DEVICE_MAX_WRITE_IMAGE_ARGS
	CL_DEVICE_MAX_CLOCK_FREQUENCY           CL_DEVICE_INFO = C.CL_DEVICE_MAX_CLOCK_FREQUENCY
	CL_DEVICE_MAX_COMPUTE_UNITS             CL_DEVICE_INFO = C.CL_DEVICE_MAX_COMPUTE_UNITS
	CL_DEVICE_MAX_CONSTANT_ARGS             CL_DEVICE_INFO = C.CL_DEVICE_MAX_CONSTANT_ARGS
	CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE      CL_DEVICE_INFO = C.CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE
	CL_DEVICE_MAX_MEM_ALLOC_SIZE            CL_DEVICE_INFO = C.CL_DEVICE_MAX_MEM_ALLOC_SIZE
	CL_DEVICE_MAX_PARAMETER_SIZE            CL_DEVICE_INFO = C.CL_DEVICE_MAX_PARAMETER_SIZE
	CL_DEVICE_MAX_SAMPLERS                  CL_DEVICE_INFO = C.CL_DEVICE_MAX_SAMPLERS
	CL_DEVICE_MAX_WORK_GROUP_SIZE           CL_DEVICE_INFO = C.CL_DEVICE_MAX_WORK_GROUP_SIZE
	CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS      CL_DEVICE_INFO = C.CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS
	CL_DEVICE_MAX_WORK_ITEM_SIZES           CL_DEVICE_INFO = C.CL_DEVICE_MAX_WORK_ITEM_SIZES
	CL_DEVICE_MEM_BASE_ADDR_ALIGN           CL_DEVICE_INFO = C.CL_DEVICE_MEM_BASE_ADDR_ALIGN
	CL_DEVICE_OPENCL_C_VERSION              CL_DEVICE_INFO = C.CL_DEVICE_OPENCL_C_VERSION
	CL_DEVICE_PARENT_DEVICE                 CL_DEVICE_INFO = C.CL_DEVICE_PARENT_DEVICE
	CL_DEVICE_PARTITION_AFFINITY_DOMAIN     CL_DEVICE_INFO = C.CL_DEVICE_PARTITION_AFFINITY_DOMAIN
	CL_DEVICE_PARTITION_MAX_SUB_DEVICES     CL_DEVICE_INFO = C.CL_DEVICE_PARTITION_MAX_SUB_DEVICES
	CL_DEVICE_PARTITION_PROPERTIES          CL_DEVICE_INFO = C.CL_DEVICE_PARTITION_PROPERTIES
	CL_DEVICE_PARTITION_TYPE                CL_DEVICE_INFO = C.CL_DEVICE_PARTITION_TYPE
	CL_DEVICE_PLATFORM                      CL_DEVICE_INFO = C.CL_DEVICE_PLATFORM
	CL_DEVICE_PRINTF_BUFFER_SIZE            CL_DEVICE_INFO = C.CL_DEVICE_PRINTF_BUFFER_SIZE
	CL_DEVICE_PROFILING_TIMER_RESOLUTION    CL_DEVICE_INFO = C.CL_DEVICE_PROFILING_TIMER_RESOLUTION
	CL_DEVICE_QUEUE_PROPERTIES              CL_DEVICE_INFO = C.CL_DEVICE_QUEUE_PROPERTIES
	CL_DEVICE_REFERENCE_COUNT               CL_DEVICE_INFO = C.CL_DEVICE_REFERENCE_COUNT
	CL_DEVICE_VENDOR_ID                     CL_DEVICE_INFO = C.CL_DEVICE_VENDOR_ID
	CL_DEVICE_VERSION                       CL_DEVICE_INFO = C.CL_DEVICE_VERSION
	CL_DRIVER_VERSION                       CL_DEVICE_INFO = C.CL_DRIVER_VERSION
)

// Partition Properties Constants
const (
	CL_DEVICE_PARTITION_EQUALLY                  CL_DEVICE_PARTITION_PROPERTY = C.CL_DEVICE_PARTITION_EQUALLY
	CL_DEVICE_PARTITION_BY_COUNTS                CL_DEVICE_PARTITION_PROPERTY = C.CL_DEVICE_PARTITION_BY_COUNTS
	CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN       CL_DEVICE_PARTITION_PROPERTY = C.CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN
	CL_DEVICE_AFFINITY_DOMAIN_NUMA               CL_DEVICE_PARTITION_PROPERTY = C.CL_DEVICE_AFFINITY_DOMAIN_NUMA
	CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE           CL_DEVICE_PARTITION_PROPERTY = C.CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE
	CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE           CL_DEVICE_PARTITION_PROPERTY = C.CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE
	CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE           CL_DEVICE_PARTITION_PROPERTY = C.CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE
	CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE           CL_DEVICE_PARTITION_PROPERTY = C.CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE
	CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE CL_DEVICE_PARTITION_PROPERTY = C.CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE
)

// OpenCL Context Properties Constants
const (
	CL_CONTEXT_PLATFORM          CL_CONTEXT_PROPERTIES = C.CL_CONTEXT_PLATFORM
	CL_CONTEXT_INTEROP_USER_SYNC CL_CONTEXT_PROPERTIES = C.CL_CONTEXT_INTEROP_USER_SYNC
)

// OpenCL Context Info Constants
const (
	CL_CONTEXT_REFERENCE_COUNT CL_CONTEXT_INFO = C.CL_CONTEXT_REFERENCE_COUNT
	CL_CONTEXT_DEVICES         CL_CONTEXT_INFO = C.CL_CONTEXT_DEVICES
	CL_CONTEXT_NUM_DEVICES     CL_CONTEXT_INFO = C.CL_CONTEXT_NUM_DEVICES
	CL_CONTEXT_PROPERTIES_     CL_CONTEXT_INFO = C.CL_CONTEXT_PROPERTIES
)

func CLGetPlatformIDs(numEntries CL_UINT, platforms []CL_PLATFORM_ID, numPlatforms *CL_UINT) CL_INT {
	numEntries_ := (C.cl_uint)(numEntries)
	var platforms_ *C.cl_platform_id
	if len(platforms) > 0 {
		platforms_ = (*C.cl_platform_id)(unsafe.Pointer(&platforms[0]))
	}
	numPlatforms_ := (*C.cl_uint)(numPlatforms)
	return CL_INT(C.clGetPlatformIDs(numEntries_, platforms_, numPlatforms_))
}

func CLGetPlatformInfo(platform CL_PLATFORM_ID, paramName CL_PLATFORM_INFO, paramValueSize CL_SIZE_T, paramValue unsafe.Pointer, paramValueSizeRet *CL_SIZE_T) CL_INT {
	platform_ := (C.cl_platform_id)(platform)
	paramName_ := (C.cl_platform_info)(paramName)
	paramValueSize_ := (C.size_t)(paramValueSize)
	paramValueSizeRet_ := (*C.size_t)(paramValueSizeRet)
	return CL_INT(C.clGetPlatformInfo(platform_, paramName_, paramValueSize_, paramValue, paramValueSizeRet_))
}

func CLGetDeviceIDs(platform CL_PLATFORM_ID, deviceType CL_DEVICE_TYPE, numEntries CL_UINT, devices *CL_DEVICE_ID, numDevices *CL_UINT) CL_INT {
	platform_ := (C.cl_platform_id)(platform)
	deviceType_ := (C.cl_device_type)(deviceType)
	numEntries_ := (C.cl_uint)(numEntries)
	devices_ := (*C.cl_device_id)(devices)
	numDevices_ := (*C.cl_uint)(numDevices)
	return CL_INT(C.clGetDeviceIDs(platform_, deviceType_, numEntries_, devices_, numDevices_))
}

func CLGetDeviceInfo(device CL_DEVICE_ID, paramName CL_DEVICE_INFO, paramValueSize CL_SIZE_T, paramValue unsafe.Pointer, paramValueSizeRet *CL_SIZE_T) CL_INT {
	device_ := (C.cl_device_id)(device)
	paramName_ := (C.cl_device_info)(paramName)
	paramValueSize_ := (C.size_t)(paramValueSize)
	paramValueSizeRet_ := (*C.size_t)(paramValueSizeRet)
	return CL_INT(C.clGetDeviceInfo(device_, paramName_, paramValueSize_, paramValue, paramValueSizeRet_))
}

func CLCreateSubDevices(inDevice CL_DEVICE_ID, properties *CL_DEVICE_PARTITION_PROPERTY, numDevices CL_UINT, outDevices *CL_DEVICE_ID, numDevicesRet *CL_UINT) CL_INT {
	inDevice_ := (C.cl_device_id)(inDevice)
	properties_ := (*C.cl_device_partition_property)(properties)
	numDevices_ := (C.cl_uint)(numDevices)
	outDevices_ := (*C.cl_device_id)(outDevices)
	numDevicesRet_ := (*C.cl_uint)(numDevicesRet)
	return CL_INT(C.clCreateSubDevices(inDevice_, properties_, numDevices_, outDevices_, numDevicesRet_))
}

func CLRetainDevice(device CL_DEVICE_ID) CL_INT {
	device_ := (C.cl_device_id)(device)
	return CL_INT(C.clRetainDevice(device_))
}

func CLReleaseDevice(device CL_DEVICE_ID) CL_INT {
	device_ := (C.cl_device_id)(device)
	return CL_INT(C.clReleaseDevice(device_))
}

// func clCreateContext
// func clCreateContextFromType

func CLRetainContext(context CL_CONTEXT) CL_INT {
	context_ := (C.cl_context)(context)
	return CL_INT(C.clRetainContext(context_))
}

func CLReleaseContext(context CL_CONTEXT) CL_INT {
	context_ := (C.cl_context)(context)
	return CL_INT(C.clReleaseContext(context_))
}

func CLGetContextInfo(context CL_CONTEXT, paramName CL_CONTEXT_INFO, paramValueSize CL_SIZE_T, paramValue unsafe.Pointer, paramValueSizeRet *CL_SIZE_T) CL_INT {
	context_ := (C.cl_context)(context)
	paramName_ := (C.cl_context_info)(paramName)
	paramValueSize_ := (C.size_t)(paramValueSize)
	paramValueSizeRet_ := (*C.size_t)(paramValueSizeRet)
	return CL_INT(C.clGetContextInfo(context_, paramName_, paramValueSize_, paramValue, paramValueSizeRet_))
}
